// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SailingPeople;

#nullable disable

namespace SailingPeople.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SailingPeople.Domain.Boat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cabin")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Guest")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<decimal>("JulyToAugustPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("JunePrice")
                        .HasColumnType("numeric");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<decimal>("MayToOctoberPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RentType")
                        .HasColumnType("integer");

                    b.Property<decimal>("SeptemberPrice")
                        .HasColumnType("numeric");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Cabin");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Guest");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("SailingPeople.Domain.BoatImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoatId");

                    b.ToTable("BoatImages");
                });

            modelBuilder.Entity("SailingPeople.Domain.BoatSpec", b =>
                {
                    b.Property<Guid>("BoatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValueEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValueTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BoatId", "SpecId");

                    b.HasIndex("SpecId");

                    b.ToTable("BoatSpecs");
                });

            modelBuilder.Entity("SailingPeople.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cdf4cd0-dda7-41ed-bf55-76a2c5dbf0a0"),
                            NameEn = "Catamaran",
                            NameTr = "Katamaran"
                        },
                        new
                        {
                            Id = new Guid("9ab03277-4a7f-401e-9677-02d6853227f0"),
                            NameEn = "Motor Yacht",
                            NameTr = "Motor Yat"
                        },
                        new
                        {
                            Id = new Guid("9a242089-51bc-4f73-b2d5-033c4e20003f"),
                            NameEn = "Gulet",
                            NameTr = "Gulet"
                        },
                        new
                        {
                            Id = new Guid("a2092ee2-5218-4846-a716-024b57c1989e"),
                            NameEn = "Sailing Yacht",
                            NameTr = "Yelkenli"
                        });
                });

            modelBuilder.Entity("SailingPeople.Domain.Spec", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da17d13c-0b26-4858-a9cb-b9582bdb74be"),
                            NameEn = "Year Of Construction",
                            NameTr = "Yapım Yılı"
                        },
                        new
                        {
                            Id = new Guid("61108cac-c37e-4f69-9ecf-ec55eda48e96"),
                            NameEn = "Wc-Shower",
                            NameTr = "Wc-Shower"
                        },
                        new
                        {
                            Id = new Guid("ddb0dc04-930d-453a-bf1d-2b0e674a1994"),
                            NameEn = "Water Capacity",
                            NameTr = "Su Kapasitesi"
                        },
                        new
                        {
                            Id = new Guid("ec25eeab-c424-477a-9b4a-a3b4f5c9e361"),
                            NameEn = "Winding Genoa",
                            NameTr = "Yelkenin Sarılması"
                        },
                        new
                        {
                            Id = new Guid("4e46cd80-163b-4718-a286-ddc378d45c13"),
                            NameEn = "Engine",
                            NameTr = "Motor"
                        },
                        new
                        {
                            Id = new Guid("a07cb0f9-4c39-4f57-9405-77bf8d6e1d93"),
                            NameEn = "Flag",
                            NameTr = "Bayrak"
                        },
                        new
                        {
                            Id = new Guid("5d87b59a-97bc-4afb-955b-175e6556e429"),
                            NameEn = "Draft",
                            NameTr = "Taslak"
                        },
                        new
                        {
                            Id = new Guid("6e0db24f-e1eb-46eb-86b1-cde121c1cf24"),
                            NameEn = "Fuel Capacity",
                            NameTr = "Yakıt Kapasitesi"
                        },
                        new
                        {
                            Id = new Guid("675bd427-8434-4f0a-96f5-9c7961ba0941"),
                            NameEn = "Classic Mainsail",
                            NameTr = "Klasik Ana Yelken"
                        },
                        new
                        {
                            Id = new Guid("a7bc34ac-f43f-4e67-b59b-40ef07a31592"),
                            NameEn = "Electric Winch",
                            NameTr = "Elektrikli Winch"
                        },
                        new
                        {
                            Id = new Guid("e51798a7-2047-4ef3-8db3-4ab87cc5d0b9"),
                            NameEn = "Model",
                            NameTr = "Model"
                        },
                        new
                        {
                            Id = new Guid("41e722c1-bfb5-48f3-b706-b99ecf754ebf"),
                            NameEn = "Generator",
                            NameTr = "Jeneratör"
                        },
                        new
                        {
                            Id = new Guid("b7a326a4-7c04-4382-a667-aa0a062c4972"),
                            NameEn = "Fuel Tank",
                            NameTr = "Yakıt Tankı"
                        },
                        new
                        {
                            Id = new Guid("e0a49834-40ae-487f-ae8b-a33194cc9d1c"),
                            NameEn = "Double Cabin",
                            NameTr = "Çift Kabin"
                        },
                        new
                        {
                            Id = new Guid("2a48445d-384e-4fd9-9100-60df49125e1a"),
                            NameEn = "Clean Water Tank",
                            NameTr = "Temiz Su Tankı"
                        },
                        new
                        {
                            Id = new Guid("f713fb86-a965-4bad-8e5e-cde3714f2e0e"),
                            NameEn = "Master Cabin",
                            NameTr = "Ana Kabin"
                        },
                        new
                        {
                            Id = new Guid("f0d7957c-c779-4a6a-a9e8-07e7d097c164"),
                            NameEn = "Mainsail",
                            NameTr = "Ana Yelken"
                        },
                        new
                        {
                            Id = new Guid("a0710b91-2461-41b6-a36d-827e7e68c21a"),
                            NameEn = "Built in",
                            NameTr = "Yapıldığı Yıl"
                        },
                        new
                        {
                            Id = new Guid("e7a5e5f6-c5d5-43be-a7bc-68897d7977c1"),
                            NameEn = "Water Withdrawal",
                            NameTr = "Su Çekilmesi"
                        },
                        new
                        {
                            Id = new Guid("48fe5920-1dd1-4583-bf74-fbac08209ba9"),
                            NameEn = "Furling Mainsail",
                            NameTr = "Sarılabilen Ana Yelken"
                        },
                        new
                        {
                            Id = new Guid("d02087d8-7684-4b78-9d1a-7e70e092cbeb"),
                            NameEn = "Twin Cabin",
                            NameTr = "İkiz Kabin"
                        },
                        new
                        {
                            Id = new Guid("66d2fe7f-1319-455c-b1c6-79b66b5a4420"),
                            NameEn = "Chartplotter",
                            NameTr = "Harita Plotteri"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SailingPeople.Domain.Boat", b =>
                {
                    b.HasOne("SailingPeople.Domain.Category", "Category")
                        .WithMany("Boats")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SailingPeople.Domain.BoatImage", b =>
                {
                    b.HasOne("SailingPeople.Domain.Boat", "Boat")
                        .WithMany("BoatImages")
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boat");
                });

            modelBuilder.Entity("SailingPeople.Domain.BoatSpec", b =>
                {
                    b.HasOne("SailingPeople.Domain.Boat", "Boat")
                        .WithMany("BoatSpecs")
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailingPeople.Domain.Spec", "Spec")
                        .WithMany("BoatSpecs")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boat");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("SailingPeople.Domain.Boat", b =>
                {
                    b.Navigation("BoatImages");

                    b.Navigation("BoatSpecs");
                });

            modelBuilder.Entity("SailingPeople.Domain.Category", b =>
                {
                    b.Navigation("Boats");
                });

            modelBuilder.Entity("SailingPeople.Domain.Spec", b =>
                {
                    b.Navigation("BoatSpecs");
                });
#pragma warning restore 612, 618
        }
    }
}
